{"version":3,"sources":["context/TaskListContext.js","components/Task.js","components/TaskList.js","components/TaskForm.js","components/Header.js","components/App.js","index.js"],"names":["TaskListContext","createContext","TaskListContextProvider","props","initialState","JSON","parse","localStorage","getItem","useState","editItem","setEditItem","tasks","setTasks","useEffect","setItem","stringify","Provider","value","addTask","title","id","uuidv4","removeTask","filter","task","clearList","findItem","item","find","editTask","newTasks","map","children","Task","useContext","className","onClick","TaskList","length","key","TaskForm","setTitle","onSubmit","e","preventDefault","onChange","target","type","placeholder","required","Header","App","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAkBC,0BA8ChBC,EA5CiB,SAACC,GAE7B,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,GAF3B,EAIPC,mBAAS,MAJF,mBAIhCC,EAJgC,KAItBC,EAJsB,OAMbF,mBAASL,GANI,mBAMhCQ,EANgC,KAMzBC,EANyB,KASvCC,qBAAU,WACNP,aAAaQ,QAAQ,QAASV,KAAKW,UAAUJ,MAC/C,CAACA,IA0BH,OACI,kBAACZ,EAAgBiB,SAAjB,CAA0BC,MAAO,CAAEN,QAAOO,QAzB9B,SAACC,GACbP,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEQ,QAAOC,GAAIC,mBAwBkBC,WArBpC,SAACF,GAChBR,EAASD,EAAMY,QAAO,SAAAC,GAAI,OAAIA,EAAKJ,KAAOA,OAoBqBK,UAjBjD,WACdb,EAAS,KAgBiEc,SAb7D,SAACN,GACd,IAAMO,EAAOhB,EAAMiB,MAAK,SAAAJ,GAAI,OAAIA,EAAKJ,KAAOA,KAC5CV,EAAYiB,IAWwEE,SARvE,SAACV,EAAOC,GACrB,IAAMU,EAAWnB,EAAMoB,KAAI,SAAAP,GAAI,OAAKA,EAAKJ,KAAOA,EAAK,CAAED,QAAOC,MAAOI,KACrEZ,EAASkB,GACTpB,EAAY,OAKkFD,aACzFP,EAAM8B,WCzBJC,EAhBF,SAAC,GAAc,IAAZT,EAAW,EAAXA,KAAW,EACQU,qBAAWnC,GAAnCuB,EADgB,EAChBA,WAAYI,EADI,EACJA,SAEnB,OACI,oCACI,wBAAIS,UAAU,aACV,8BAAOX,EAAKL,OACZ,6BACI,4BAAQiB,QAAU,kBAAMd,EAAWE,EAAKJ,KAAKe,UAAU,uBAAsB,uBAAGA,UAAU,sBAC1F,4BAAQC,QAAU,kBAAMV,EAASF,EAAKJ,KAAKe,UAAU,qBAAoB,uBAAGA,UAAU,oBCQ3FE,EAhBE,WAAO,IACb1B,EAASuB,qBAAWnC,GAApBY,MACP,OACI,6BACKA,EAAM2B,OAAU,wBAAIH,UAAU,QAC1BxB,EAAMoB,KAAI,SAACP,GACR,OAAO,kBAAC,EAAD,CAAMA,KAAMA,EAAMe,IAAKf,EAAKJ,SAIvC,yBAAKe,UAAU,YAAf,cC6BDK,EAxCE,WAAO,IAAD,EACgCN,qBAAWnC,GAAtDmB,EADW,EACXA,QAASO,EADE,EACFA,UAAWhB,EADT,EACSA,SAAUoB,EADnB,EACmBA,SADnB,EAGOrB,mBAAS,IAHhB,mBAGZW,EAHY,KAGLsB,EAHK,KA6BnB,OAVA5B,qBAAU,WAEF4B,EADDhC,EACUA,EAASU,MAET,MAEd,CAACV,IAKA,0BAAMiC,SArBW,SAAAC,GACjBA,EAAEC,iBACGnC,EAIDoB,EAASV,EAAOV,EAASW,KAHzBF,EAAQC,GACRsB,EAAS,MAiBiBN,UAAU,QACpC,2BAAOU,SA1BM,SAAAF,GACjBF,EAASE,EAAEG,OAAO7B,QAyBiB8B,KAAK,OAAO9B,MAAOE,EAAOgB,UAAU,aAAaa,YAAY,cAAcC,UAAQ,IAClH,yBAAKd,UAAU,WACX,4BAAQA,UAAU,mBAAmBY,KAAK,UAAUtC,EAAW,YAAc,YAC7E,4BAAQ2B,QAASX,EAAWU,UAAU,iBAAtC,YCzBDe,EAVA,WACX,OACI,6BACI,yBAAKf,UAAU,UACX,+CCiBDgB,EAhBH,WACR,OACI,kBAAC,EAAD,KACI,yBAAKhB,UAAU,aACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,QACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,WCXxBiB,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,U","file":"static/js/main.b601e958.chunk.js","sourcesContent":["import React, { useState, createContext, useEffect } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const TaskListContext = createContext()\r\n\r\nconst TaskListContextProvider = (props) => {\r\n\r\n    const initialState = JSON.parse(localStorage.getItem('tasks')) || []\r\n\r\n    const [editItem, setEditItem] = useState(null)\r\n\r\n    const [tasks, setTasks] = useState(initialState)\r\n\r\n    \r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n    },[tasks])\r\n\r\n    const addTask = (title) => {\r\n        setTasks([...tasks, { title, id: uuidv4() }])\r\n    }\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks.filter(task => task.id !== id))\r\n    }\r\n\r\n    const clearList = () => {\r\n        setTasks([])\r\n    }\r\n\r\n    const findItem = (id) => {\r\n        const item = tasks.find(task => task.id === id)\r\n        setEditItem(item)\r\n    }\r\n\r\n    const editTask = (title, id) => {\r\n        const newTasks = tasks.map(task => (task.id === id ? { title, id } : task))\r\n        setTasks(newTasks)\r\n        setEditItem(null)\r\n    }\r\n\r\n\r\n    return (\r\n        <TaskListContext.Provider value={{ tasks, addTask, removeTask, clearList, findItem, editTask, editItem }}>\r\n            {props.children}\r\n        </TaskListContext.Provider>\r\n    )\r\n}\r\n\r\nexport default TaskListContextProvider","import React, { useContext } from 'react'\r\nimport { TaskListContext } from '../context/TaskListContext';\r\n\r\nconst Task = ({ task }) => {\r\n    const {removeTask, findItem} = useContext(TaskListContext)\r\n\r\n    return (\r\n        <>\r\n            <li className=\"list-item\">\r\n                <span>{task.title}</span>\r\n                <div>\r\n                    <button onClick={ () => removeTask(task.id)} className=\"btn-delete task-btn\"><i className=\"fas fa-trash-alt\"></i></button>\r\n                    <button onClick={ () => findItem(task.id)} className=\"btn-edit task-btn\"><i className=\"fas fa-pen\"></i></button>\r\n                </div>\r\n            </li>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Task;\r\n","import React, { useContext } from 'react';\r\nimport { TaskListContext } from '../context/TaskListContext';\r\nimport Task from './Task'\r\n\r\nconst TaskList = () => {\r\n    const {tasks} = useContext(TaskListContext)\r\n    return ( \r\n        <div>\r\n            {tasks.length ? (<ul className=\"list\">\r\n                {tasks.map((task) => {\r\n                    return <Task task={task} key={task.id}/>\r\n                })}\r\n            </ul>\r\n            ): (\r\n                <div className=\"no-tasks\">No Tasks</div>\r\n            )}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default TaskList;","import React, { useContext, useState, useEffect } from 'react'\r\nimport { TaskListContext } from \"../context/TaskListContext\"\r\n\r\nconst TaskForm = () => {\r\n    const { addTask, clearList, editItem, editTask } = useContext(TaskListContext)\r\n\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    const handleChange = e => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (!editItem) {\r\n            addTask(title);\r\n            setTitle(\"\");   \r\n        } else {\r\n            editTask(title, editItem.id)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(editItem){\r\n            setTitle(editItem.title)\r\n        } else {\r\n            setTitle('')\r\n        }\r\n    }, [editItem])\r\n    \r\n    \r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"form\">\r\n            <input onChange={handleChange} type=\"text\" value={title} className=\"task-input\" placeholder=\"Add Task...\" required/>\r\n            <div className=\"buttons\">\r\n                <button className=\"btn add-task-btn\" type=\"submit\">{editItem ? \"Edit Task\" : \"Add Task\"}</button>\r\n                <button onClick={clearList} className=\"btn clear-btn\">Clear</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TaskForm\r\n","import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n            <div className=\"header\">\r\n                <h1>Task Manager</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport './App.css'\r\nimport TaskList from './TaskList';\r\nimport TaskListContextProvider from '../context/TaskListContext';\r\nimport TaskForm from './TaskForm';\r\nimport Header from './Header';\r\n\r\nconst App = () => {\r\n    return (\r\n        <TaskListContextProvider>\r\n            <div className=\"container\">\r\n                <div className=\"app-wrapper\">\r\n                    <div className=\"main\">\r\n                        <Header />\r\n                        <TaskForm />\r\n                        <TaskList />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </TaskListContextProvider>\r\n    );\r\n};\r\n\r\nexport default App;","import React from \"react\"\r\nimport ReactDOM from 'react-dom'\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"root\"));\r\n\r\n"],"sourceRoot":""}